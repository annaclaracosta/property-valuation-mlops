# -*- coding: utf-8 -*-
"""Property-Friends-basic-model (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Eol0vHeabFpdjsCn0KyzJjCm_4Rg4Lvc
"""

#!pip install category_encoders
#!pip install pandas
#!pip install scikit-learn

import pandas as pd
import numpy as np

from sklearn.metrics import (
    mean_squared_error,
    mean_absolute_percentage_error,
    mean_absolute_error)

from category_encoders import TargetEncoder
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import GridSearchCV

def load_data(train_path:str, test_path:str) -> (pd.DataFrame, pd.DataFrame):
    """
    Loads the train and test data into pandas DataFrames
    """
    train = pd.read_csv(train_path)
    test = pd.read_csv(test_path)
    return train, test

train, test = load_data('train.csv', 'test.csv')

train_cols = [
    col for col in train.columns if col not in ['id', 'target']
    ]

categorical_cols = ["type", "sector"]
target           = "price"

categorical_transformer = TargetEncoder()

preprocessor = ColumnTransformer(
    transformers=[
        ('categorical',
          categorical_transformer,
          categorical_cols)
    ])

steps = [
    ('preprocessor', preprocessor),
    ('model', GradientBoostingRegressor(**{
        "learning_rate":0.01,
        "n_estimators":300,
        "max_depth":5,
        "loss":"absolute_error"
    }))
]

pipeline = Pipeline(steps)

pipeline.fit(train[train_cols], train[target])

test_predictions = pipeline.predict(test[train_cols])
test_target = test[target].values

type(test_predictions), type(test_target)

def print_metrics(predictions, target):
    print("RMSE: ", np.sqrt(mean_squared_error(predictions, target)))
    print("MAPE: ", mean_absolute_percentage_error(predictions, target))
    print("MAE : ", mean_absolute_error(predictions, target))

print_metrics(test_predictions, test_target)